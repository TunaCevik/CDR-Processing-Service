version: '3.8'
services:
  db:
    # PostgreSQL Veritabanı Servisi
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: cdr_db
      POSTGRES_USER: cdr_user
      POSTGRES_PASSWORD: mysecretpassword
    ports:
      - "5432:5432" # Host'taki 5432 portunu konteynerdeki 5432 portuna map'ler
    volumes:
      - db_data:/var/lib/postgresql/data # Veritabanı verilerini kalıcı hale getirmek için volume kullanır
    healthcheck: # Veritabanının hazır olup olmadığını kontrol eder
      test: ["CMD-SHELL", "pg_isready -U cdr_user -d cdr_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
  cdr-app:
   # Quarkus Uygulama Servisi
    build:
      context: . # Dockerfile'ın bulunduğu dizin (proje kökü)
      dockerfile: src/main/docker/Dockerfile.jvm # Kullanılacak Dockerfile'ı belirtir
      # Eğer native mod kullanacaksanız:
      # dockerfile: src/main/docker/Dockerfile.native
    container_name: cdr_processing_app
    ports:
      - "8080:8080" # Uygulamanın host'taki 8080 portunu konteynerdeki 8080 portuna map'ler
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/cdr_db
      QUARKUS_DATASOURCE_USERNAME: cdr_user
      QUARKUS_DATASOURCE_PASSWORD: mysecretpassword
      # Geliştirme ortamı için veritabanı şemasını otomatik oluşturma
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
    depends_on:
      db: # cdr-app servisi db servisi başladıktan sonra başlar
        condition: service_healthy # db servisinin healthcheck'ini geçmesini bekler
volumes:
  db_data: